연산자


연산자 : 연산을 수행하는 기호
피연산자 : 연산자의 작업 대상


단항 연산자

* 증감 연산자 ++ , --
	
	전위형 : 값이 참조되기 전에 증가 시킨다. ex) j = ++ i;
	후위형 : 값이 참조된 후에 증가시킨다. ex) j = i ++;

	j = ++i // 전위형 ———> i증가 후에 j 에 i값을 대입
	j = i++ // 후위형 ———> j에 i값을 대입 후에 i값 증가

산술 연산자

0으로 나눌수 없음

int / int —> 소수점 이하는 버려짐 ( 반올림 되지 않음 )
ex) int a = 10 , b = 4 ;
	a / b = 2
- 올바른 값을 구하기 위해선 피연산자 한쪽을 실수형으로 형변환 해야 올바른 값을 얻을수 있음
	a / (float) b = 2.5


소수점 이하 반올림 하는 법
* Math.round() 사용
* (int)(피연산자 * 원하는 자리수 + 0.5 ) / 원하는 자리수f
* ex ) (int)(3.141592 * 1000 + 0.5 ) / 1000f


나머지 연산자 %

왼쪽의 피연산자를 오른쪽 피연산자로 나누고 난 나머지의 값을 결과로 반환 하는 연산자. 
주로 짝수 , 홀수 또는 배수 검사에 주로 사용

비교 연산자 

* 대소비교 연산자 < , > , <= , >=
* 등가비교 연산자 == , !=


문자열의 비교

* 문자열을 비교할 때는 == 대신 equals() 라는 메서드 사용
* equals()는 문자열의 내용이 같은지 비교 함 , 대소문자 구분없이 비교는 equalsIgnoreCase()


논리 연산자

* || ( or 결합 ) : 피연산자 중 어느 한 쪽만 true면 true 반환
* && ( and 결합 ) : 피연산자 양쪽 모두 true이어야 true 반환

1. x는 10보다 크고 20 보다 작다

- 10 < x && x < 20

2. i 는 2의 배수 또는 3의 배수이다

- i % 2 == 0 || i % 3 == 0

3. i 는 2의 배수 또는 3의 배수이지만 6의 배수는 아니다

- ( i % 2 == 0 || i % 3 == 0 ) && i % 6 != 0

4. 문자 ch는 숫자 (  ‘0’ ~ ‘9’ ) 이다

- ‘0’ <= ch && ch <= ‘9’

5. 문자 ch 는 대문자 또는 소문자이다.

- ( ‘a’ <= ch && ch <= ‘z’ ) || ( ‘A’ <= ch && ch <= ‘Z’ )


조건 연산자

* 조건식 , 식1 , 식2 모두 세 개의 피연산자를 필요로 하는 삼항 연산자
* 조건식 ? 식1 : 식2 ——> 조건식이 true 이면 식 1, false 이면 식2





