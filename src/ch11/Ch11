컬렉션 프레임웤


List : 순서가 있는 데이터 집합. 중복 허용

- 구현 클래스 : ArrayList , LinkedList , stack , Vector ...

Set : 순서를 유지하지 않는 데이터 집합. 중복 허용 x

- 구현 클래스 : HashSet , TreeSet ...

Map : 키와 밸류 한쌍으로 이루어진 데이터 집합.
           키는 중복 허용 x , 밸류는 중복 허용

- HashMap , TreeMap , Hashtable ...



ArrayList 

- 기존의 Vector를 개선한 것
- 데이터를 순차적으로 저장


LinkedList

* 기존의 배열의 단점

1. 크기를 변경할 수 없음 : 새로운 배열을 생성해서 데이터를 복하해야함. 실행속도를 향상시키기 위해선 충분히 큰 크기의 배열을 생성해야 하므로 메모리 낭비
2. 비순차적인 데이터의 추가 또는 삭제에 시간이 오래걸림 : 배열의 중간에 데이터를 추가하려면 빈자리를 만들기 위해 데이터를 복사해서 이동해야 함

- 배열의 단점을 보안하기 위해 고안됨
- 불연속적으로 존재하는 데이터를 서로 연결한 형태로 구성
- 각 요소들은 자신과 연결된 다음 요소에 대한 참조( 주소값 )와 데이터로 구성되어 있음

LinkedList의 데이터 삭제 : 삭제하고자 하는 요소의 이전요소가 삭제하고자 하는 요소의 다음 요소를 참조하도록 변경하면 됨. 

순차적으로 추가 / 삭제하는 경우 ArrayList 가 LinkedList 보다 빠름

중간 데이터를 추가 / 삭제하는 경우는 LinkedList 가 ArrayList 보다 빠름



Stack : 마지막에 저장한 데이터를 가장 먼저 꺼내게 되는 LIFO 구조 
 
Queue : 처음에 저장한 데이터를 가장 먼저 꺼내는 FIFO 구조 


자바에서 Stack은 클래스로 구현하여 제공하지만 Queue는 인터페이스로만 정의 해두어서 Queue 인터페이스를 구현한 클래스를 사용해야 함 

Stack 의 활용 : 수식계산, 웹브라우저의 뒤로 / 앞으로

Queue 의 활용 : 최근 사용문서, 대기목록, 버퍼



