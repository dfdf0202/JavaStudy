객체지향

객체지향언어 장점
1. 코드의 재사용성이 높음
- 새로운 코드를 작성할 때 기존의 코드를 이용해 쉽게 작성 가능
2. 코드의 관리가 용이
- 코드간의 관계를 이용해 적은 노력으로 쉽게 코드를 변경할 수 있음
3. 신뢰성이 높은 프로그래밍
- 제어자와 메서드를 통해 데이터를 보호할 수 있고 코드의 중복을 제거

클래스 - 객체를 정의해놓은 것, 객체의 설계도

객체 - 속성 , 기능으로 구성
속성 : 멤버변수 , 기능 : 메서드

객체 생성과 사용

- 클래스명 변수 = new 클래스명()
- 생성된 객체의 주소를 변수가 가르켜 해당 객체들을 다룰수 있음

변수
- 선언된 위치에 따라 변수에 종류를 결정
- 멤버변수 : 클래스 영역에 선언되며 static이 붙은 변수는 클래스 변수 붙지 않은건 인스턴스 변수
- 지역변수 : 멤버변수를 제외한 나머지 변수들

1. 인스턴스 변수 : 클래스 영역에 선언. 클래스의 인스턴스를 생성할때 생성됨. 독립적인 저장공간을 가지므로 서로 다른 값을 가질 수 있음.
2. 클래스 변수 : 클래스 변수는 인스턴스가 공통된 변수를 공유하게 됨. 한 클래스의 모든 인스턴스들이 공통적인 값을 유지해야 할때 클래스 변수로 선언
			   인스턴스를 생성하지 않고도 언제든지 사용 가능.
3. 지역변수 : 메서드 내에 선언되며 메서드 안에서만 사용 가능.

메서드 - 특정 작업을 수행하는 일련의 문장들을 하나로 묶은 것. 
- 반환타입은 일치하거나 자동 형변환이 가능해야 함.
- 매개변수는 여러 개일 수 있지만 반환값은 하나만 허용
- static 메서드는 같은 클래스의 인스턴스 메서드를 호출할 수 없음


JVM의 메모리 구조

- 메서드 영역 : 클래스가 사용되면 그 클래스의 정보들을 저장함
- 힙 ( heap ) :  인스턴스가 생성되는 공간. new 연산자에 의해 생성된 객체들의 정보가 저장
- call stack , 호출스택 : 메서드의 작업에 필요한 메모리 공간. 메서드가 작업을 마치면 메모리공간이 반환됨


기본형 매개변수와 참조형 매개변수

- 기본형 매개변수 : 기본형 값이 저장. 변수의 값을 읽기만할 수 있음
- 참조형 매개변수 : 인스턴스의 주소가 저장. 변수의 값을 읽고 변경할 수 있음


클래스 메서드
- 클래스 변수와 마찬가지로 static 을 붙여 생성
- 인스턴스 변수나 인스턴스 메서드를 사용하지 않는 메서드는 클래스 메서드로 선언

클래스 멤버와 인스턴스 멤버간의 참조와 호출
- 같은 클래스에 속한 멤버들 간에는 별도의 인스턴스 생성 없이 참조 가능
- 클래스멤버가 인스턴스 멤버를 참조할 때는 인스턴스 생성 후 참조 가능
* 인스턴스 멤버가 존재하는 시점에는 클래스 멤버가 항상 존재 하지만 클래스 멤버가 존재하는 시점에 인스턴스 멤버가 존재하지 않을 수도 있기 때문

오버로딩 - 하나의 메서드 이름으로 여러기능을 구현하기 위해 사용
- 메서드 이름이 같아야 함
- 매개변수 개수 또는 타입이 달라야 함


생성자 - 인스턴스가 생성될 때 호출되는 인스턴스 초기화 메서드. 클래스 이름과 생성자 이름이 같아야 하며 리턴타입이 없음

- 기본생성자 : 클래스에 생성자가 하나도 없을때만 컴파일러가 자동적으로 생성해줌
- 매개변수가 있는 생성자를 선언한 후엔 기본 생성자를 생성하거나 객체를 생성할때 매개변수를 기입해야함

매개변수가 있는 생성자 : 메서드과 같기 때문에 매개변수를 선언하여 호출 시 값을 넘겨받아 인스턴스 초기화에 사용 가능

생성자에서 다른 생성자 호출하기 - this() , this

- 한 생성자에서 다른 생성자를 호출할 때는 반드시 첫줄에서 호출
- 다른 생성자를 호출할 때는 클래스이름 대신 this()를 사용

ex ) Car (String color ){
		this ( color , “ auto “ , 4 );
		door = 5;
	}

this - 매개변수와 인스턴스 변수의 이름이 일치하는 경우가 많기 때문에 this로 인스턴스 자신을 가르키며 매개변수와 구별할때 사용

변수의 초기화
- 멤버변수 ( 클래스 변수와 인스턴스 변수 ) 위 초기화는 선택적이지만 지역변수 ( 메서드 내의 변수 ) 는 초기화가 필수

초기화 블럭


멤버변수 초기화 시기와 순서

클래스변수의 초기화 시점 : 클래스가 처음 로딩될 때 단 한번 초기화
인스턴스변수의 초기화 시점 : 인스턴스가 생성될 때 초기화. 각 인스턴스별로 초기화

쿨래스변수의 초기화 순서 : 기본값 -> 명시적 초기화 -> 클래스 초기화 블럭
인그턴스변수의 초기화 순서 : 기본값 -> 명시적 초기화 -> 인스턴스 초기화 블럭 -> 생성자
