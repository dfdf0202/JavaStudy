예외처리

프로그램 오류 : 프로그램이 어떤 원인에 의해 오작동 되거나 비정상적으로 종료되는 현상

- 컴파일 에러 : 컴파일시 발생되는 에러
- 런타임 에러 : 실행히 발생되는 에러
- 논리적 에러 : 실행은 되지만 의도와 다르게 실행

* 에러 : 코드에 의해서 수습될 수 없는 심각한 오류
* 예외 : 코드에 의해 수습 가능한 미약한 오류


예외 ( Exeption )

- RuntimeException : 프로그래머의 실수에 의해 발생되는 예외
- RuntimeExceptuon 을 제외한 나머지 Exeption : 프로그램 사용자의 실수와 같은 외적인 요인에 의해 발생되는 예외



예외처리하기  try - catch 문

- 정의 : 프로그램 실행 시 발생할 수 있는 예외에 대비한 코드를 작성하는 것
- 목적 : 프로그램의 비정상 종료를 막고 정상적인 상태를 유지하는 것

	try {
		// 예외가 발생할 수 있는 문장
	}  catch ( Exception1 e1 ) {
		// Exception1 이 발생하면 이것을 처리하기 위한 문장
	}


try - catch 의 흐름

- try 블럭에서 예외가 발생한 경우

1. 발생한 예외와 일치하는 catch 블럭이 있는지 확인
2. 일치하는 catch 블럭을 찾게 되면 그 catch 블럭 내의 문장을 수행하고 전체 try - catch 문을 빠져나간 후 그 다음 문장을 계속해서 수행.
	일치하는 catch 블럭을 찾지 못하면 예외처리 되지 않음

- try 블럭에서 예외가 발생하지 않은 경우
	
	catch 블럭을 거치지 않고 try - cathc 문을 빠져나가 수행을 계속 함



printStackTrace() : 예외발생 당시의 호출스택에 있었던 메서드의 정보와 예외 메시지를 화면에 출력

getMessage() : 발생한 예외클래스의 인스턴스에 저장된 메시지를 얻을 수 있음


finally : 예외 발생 상관 없이 무조건 실행 되어야할 코드를 포함시키기 위해 사용
try - catch - finally의 순서로 구성





